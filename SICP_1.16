# Reducing degree
# if k is even, n^k = (((n^2)^2)....^2)
# elif k is odd, n^k = n*(((n^2)^2)....^2)..)

# Recursive Proc
(define (fast-expt b n) 
    (define (square x) (* x x))
    (define (even? x) (= (remainder x 2) 0))
    (cond ((= n 0) 1)
          ((even? n) (square (fast-expt b (/ n 2))))
          (else (* b (fast-expt b (- n 1))))))

(define (square x) (* x x))
(define (even? x) (= (remainder x 2) 0))

# Iterative Proc
(define (fast-expt b n)
    (define (square x) (* x x))
    (define (even? x) (= (remainder x 2) 0))
    (define (fast-expt-iter b n product)
        (cond ((= n 0) product)
            ((even? n) (* product (square (fast-expt-iter b (/ n 2) 1))))
            (else (fast-expt-iter b (- n 1) (* b product)))))
    (fast-expt-iter b n 1))
